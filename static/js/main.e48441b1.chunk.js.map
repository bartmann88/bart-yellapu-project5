{"version":3,"sources":["HeroCard.js","App.js","serviceWorker.js","index.js"],"names":["HeroCard","props","className","this","name","src","image","alt","fullName","publisher","alignment","intelligence","strength","speed","durability","power","combat","Component","App","handleChange","event","setState","query","target","value","handleSearch","preventDefault","showCard","loading","axios","get","state","then","response","apiData","data","results","type","placeholder","onChange","onClick","map","val","url","biography","powerstats","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sQA0CeA,G,wDAvCb,WAAYC,GAAQ,uCACZA,G,qDAGN,OACE,yBAAKC,UAAU,iBACb,4BAAKC,KAAKF,MAAMG,MAEhB,yBACEF,UAAU,YACVG,IAAKF,KAAKF,MAAMK,MAChBC,IAAKJ,KAAKF,MAAMM,MAGlB,yBAAKL,UAAU,cACb,yCACA,4BACE,4BAAKC,KAAKF,MAAMO,UAChB,4BAAKL,KAAKF,MAAMQ,WAChB,4BAAKN,KAAKF,MAAMS,aAIpB,yBAAKR,UAAU,gBACb,0CACA,4BACE,4BAAKC,KAAKF,MAAMU,cAChB,4BAAKR,KAAKF,MAAMW,UAChB,4BAAKT,KAAKF,MAAMY,OAChB,4BAAKV,KAAKF,MAAMa,YAChB,4BAAKX,KAAKF,MAAMc,OAChB,4BAAKZ,KAAKF,MAAMe,e,GAhCLC,c,iBC6FRC,E,kDArFb,aAAe,IAAD,8BACZ,gBASFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOC,SAXxB,EAcdC,aAAe,SAACL,GACdA,EAAMM,iBACN,EAAKL,SAAS,CAAEM,UAAU,EAAMC,SAAS,IACzCC,IACGC,IADH,sGAGM,EAAKC,MAAMT,QAEdU,MAAK,SAACC,GAAD,OACJ,EAAKZ,SAAS,CACZa,QAASD,EAASE,KAAKC,QACvBR,SAAS,QAvBf,EAAKG,MAAQ,CACXT,MAAO,GACPK,UAAU,EACVO,QAAS,GACTN,SAAS,GANC,E,qDA8BJ,IAAD,OACP,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,mBACb,wDACA,uBAAGA,UAAU,gBAAb,oCACA,0BAAMA,UAAU,gBACd,2BACEmC,KAAK,OACLC,YAAY,aACZpC,UAAU,YACVsB,MAAOrB,KAAK4B,MAAMT,MAClBiB,SAAUpC,KAAKgB,eAEjB,4BAAQjB,UAAU,YAAYsC,QAASrC,KAAKsB,cAA5C,WAKDtB,KAAK4B,MAAMH,QACV,uBAAG1B,UAAU,kBAAb,0BACE,MAGN,yBAAKA,UAAU,iBACZC,KAAK4B,MAAMG,QACV/B,KAAK4B,MAAMG,QAAQO,KAAI,SAACC,GAAD,OACrB,yBAAKxC,UAAW,EAAK6B,MAAMJ,SAAW,OAAS,QAC7C,kBAAC,EAAD,CAEErB,MAAOoC,EAAIpC,MAAMqC,IACjBpC,IAAG,UAAKmC,EAAIE,UAAU,aAAnB,YAAmCF,EAAItC,KAAvC,UACHA,KAAMsC,EAAItC,KACVI,SAAQ,qBAAgBkC,EAAIE,UAAU,cACtCnC,UAAS,qBAAgBiC,EAAIE,UAAUnC,WACvCC,UAAS,qBAAgBgC,EAAIE,UAAUlC,WAEvCC,aAAY,wBAAmB+B,EAAIG,WAAWlC,cAC9CC,SAAQ,qBAAgB8B,EAAIG,WAAWjC,UACvCC,MAAK,kBAAa6B,EAAIG,WAAWhC,OACjCC,WAAU,uBAAkB4B,EAAIG,WAAW/B,YAC3CC,MAAK,kBAAa2B,EAAIG,WAAW9B,OACjCC,OAAM,mBAAc0B,EAAIG,WAAW7B,cAKzC,uBAAGd,UAAU,YAAb,kC,GA9EMe,aCGE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e48441b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass HeroCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"cardContainer\">\r\n        <h2>{this.props.name}</h2>\r\n\r\n        <img\r\n          className=\"heroImage\"\r\n          src={this.props.image}\r\n          alt={this.props.alt}\r\n        />\r\n\r\n        <div className=\"bioSection\">\r\n          <h3>Biography</h3>\r\n          <ul>\r\n            <li>{this.props.fullName}</li>\r\n            <li>{this.props.publisher}</li>\r\n            <li>{this.props.alignment}</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"powerSection\">\r\n          <h3>PowerStats</h3>\r\n          <ul>\r\n            <li>{this.props.intelligence}</li>\r\n            <li>{this.props.strength}</li>\r\n            <li>{this.props.speed}</li>\r\n            <li>{this.props.durability}</li>\r\n            <li>{this.props.power}</li>\r\n            <li>{this.props.combat}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeroCard;\r\n","// Import Statements\n\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport HeroCard from \"./HeroCard\";\nimport axios from \"axios\";\n\n// Initializing Class Component\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      query: \"\",\n      showCard: false,\n      apiData: [],\n      loading: false,\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({ query: event.target.value });\n  };\n\n  handleSearch = (event) => {\n    event.preventDefault();\n    this.setState({ showCard: true, loading: true });\n    axios\n      .get(\n        `https://cors-anywhere.herokuapp.com/https://superheroapi.com/api/10222600563671771\n/search/${this.state.query}`\n      )\n      .then((response) =>\n        this.setState({\n          apiData: response.data.results,\n          loading: false,\n        })\n      );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"headerContainer\">\n          <h1>Concise Comic Compendium</h1>\n          <p className=\"introContent\">Who is Your Favourite Character?</p>\n          <form className=\"searchToggle\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter Name\"\n              className=\"searchBar\"\n              value={this.state.query}\n              onChange={this.handleChange}\n            />\n            <button className=\"searchBtn\" onClick={this.handleSearch}>\n              Search\n            </button>\n          </form>\n\n          {this.state.loading ? (\n            <p className=\"loadingMessage\">Loading Please wait...</p>\n          ) : null}\n        </div>\n\n        <div className=\"heroContainer\">\n          {this.state.apiData ? (\n            this.state.apiData.map((val) => (\n              <div className={this.state.showCard ? \"show\" : \"hide\"}>\n                <HeroCard\n                  // Biography\n                  image={val.image.url}\n                  alt={`${val.biography[\"full-name\"]} ${val.name} Image`}\n                  name={val.name}\n                  fullName={`Full Name: ${val.biography[\"full-name\"]}`}\n                  publisher={`Publisher: ${val.biography.publisher}`}\n                  alignment={`Alignment: ${val.biography.alignment}`}\n                  // Powerstats\n                  intelligence={`Inteligence - ${val.powerstats.intelligence}`}\n                  strength={`Strength - ${val.powerstats.strength}`}\n                  speed={`Speed - ${val.powerstats.speed}`}\n                  durability={`Durability - ${val.powerstats.durability}`}\n                  power={`Power - ${val.powerstats.power}`}\n                  combat={`Combat - ${val.powerstats.combat}`}\n                />\n              </div>\n            ))\n          ) : (\n            <p className=\"tryAgain\">Try Another Character...</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}